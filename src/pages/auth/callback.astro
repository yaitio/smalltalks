---
/**
 * Auth Callback Page
 * Handles magic link verification and user authentication
 * Query params: ?token=xxx
 */

// Get token from URL query params
const token = Astro.url.searchParams.get('token');

// If no token provided, redirect to home with error
if (!token) {
  return Astro.redirect('/?error=missing_token');
}

// In a real app, we would verify the token with the backend here
// For now, we'll handle verification on the client side
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Authenticating... - Smalltalks</title>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        background: #fafafa;
      }

      .container {
        text-align: center;
        padding: 2rem;
        max-width: 400px;
      }

      .spinner {
        width: 48px;
        height: 48px;
        border: 4px solid #ffe5e5;
        border-top-color: #ff6b6b;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
        margin: 0 auto 2rem;
      }

      @keyframes spin {
        to {
          transform: rotate(360deg);
        }
      }

      h1 {
        font-size: 1.5rem;
        font-weight: 600;
        color: #000;
        margin-bottom: 0.5rem;
      }

      p {
        color: #666;
        line-height: 1.5;
      }

      .error {
        background: #fee2e2;
        border: 1px solid #ef4444;
        color: #991b1b;
        padding: 1rem;
        border-radius: 8px;
        margin-top: 1rem;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <div class="spinner"></div>
      <h1 id="status">Verifying your link...</h1>
      <p id="message">Please wait while we log you in.</p>
      <div id="error" class="error" style="display: none;"></div>
    </div>

    <script define:vars={{ token }}>
      // Import auth client and store (will be bundled by Astro)
      import { authClient } from '../../services/authClient';
      import { useAuthStore } from '../../stores/authStore';

      async function verifyAndRedirect() {
        try {
          // Verify the token with backend
          const result = await authClient.verifyToken(token);

          if (result.success && result.user) {
            // Set user in store
            useAuthStore.getState().setUser(result.user);

            // Show success message briefly
            document.getElementById('status').textContent = 'Success!';
            document.getElementById('message').textContent = 'Redirecting you now...';

            // Redirect to talk page after short delay
            setTimeout(() => {
              window.location.href = '/talk';
            }, 1000);
          } else {
            throw new Error(result.message || 'Invalid or expired link');
          }
        } catch (error) {
          console.error('Auth callback error:', error);

          // Show error message
          document.getElementById('status').textContent = 'Authentication Failed';
          document.getElementById('message').textContent =
            'There was a problem verifying your link.';

          const errorDiv = document.getElementById('error');
          errorDiv.textContent =
            error instanceof Error ? error.message : 'Invalid or expired magic link';
          errorDiv.style.display = 'block';

          // Redirect to home after 3 seconds
          setTimeout(() => {
            window.location.href = '/?error=auth_failed';
          }, 3000);
        }
      }

      // Start verification when page loads
      verifyAndRedirect();
    </script>
  </body>
</html>
